@page "/"
@page "/demo/{demoname}"
@using Microsoft.AspNetCore.SignalR.Client
@using Plumbing
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using Markdig

<div id="chat-content" style="flex: 1; overflow-y: auto;">
    <!-- Your main scrollable content goes here -->
    @foreach (var message in _messages)
    {
        string html = Markdown.ToHtml(@message.Message);
        //var type = message.From == "user" ? ChatBubblePosition.Start : ChatBubblePosition.End;
        <MudChat>
            @if (message.From != "instructor")
            {
                <MudChatHeader Name=@message.From />
            }
            <MudAvatar Variant="Variant.Filled" Style="grid-row-start: 1;">
                @switch (message.From)
                {
                    case "analyst":
                        <MudImage Src="dicebear-green-bot.jpg"></MudImage>
                        break;
                    case "editor":
                        <MudImage Src="dicebear-purple-bot.jpg"></MudImage>
                        break;
                    case "user":
                        <MudIcon Color="Color.Dark" Icon="@Icons.Material.Filled.Person"
                                     Size="Size.Large"/>
                        break;
                    case "instructor":
                        <MudIcon Color="Color.Warning" Icon="@Icons.Material.Filled.Info"
                                 Size="Size.Large"/>
                        break;
                    case "assistant":
                    case "copywriter":
                        <MudImage Src="dicebear-yellow-bot.jpg"></MudImage>
                        break;
                    default:
                        @message.From
                        break;
                }
            </MudAvatar>
            <MudChatBubble>
                @((MarkupString)html)
            </MudChatBubble>
        </MudChat>
    }
</div>

<div style="position: sticky; bottom: 0;">
    <MudTextField @bind-Value="_messageInput"  
                  OnKeyDown="HandleKeyDown"
                  KeyDownPreventDefault="_preventDefault"
                  Immediate="true"
                  Label="You"
                  Variant="Variant.Text"></MudTextField>
</div>


<br />

@code {
    [Parameter]
    public string? DemoName { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        if (_hubConnection is not null)
        {
            _messages = [];
            await _hubConnection.SendAsync("Select", DemoName);
        }
    }
    
    private HubConnection? _hubConnection;
    bool _preventDefault;
    private List<ChatMessage> _messages = [];
    private string? _messageInput;

    protected async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            _preventDefault = true;
            await Submit();
        }
        else
        {
            _preventDefault = false;
        }
    }

    private async Task Submit()
    {
        if (_messageInput != null && _hubConnection != null)
        {
            await _hubConnection.SendAsync("SendMessage", "user", _messageInput);
            await AddMessage("user", _messageInput);
            _messageInput = string.Empty;
            StateHasChanged();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", AddNonUserMessage);
        _hubConnection.On<string>("NewDefaultUserMessage", SetMessage);
        
        await _hubConnection.StartAsync();
        if (DemoName == null)
        {
            Navigation.NavigateTo("demo/01 Basic");
        }
    }

    private async Task SetMessage(string? arg)
    {
        _messageInput = arg;
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddNonUserMessage(string user, string message)
    {
        if (user == "user") return;
        await AddMessage(user, message);
    }

    private async Task AddMessage(string user, string message)
    {
        _messages.Add(new ChatMessage()
        {
            From = user,
            Message = message
        });
        await InvokeAsync(StateHasChanged);
        await JS.InvokeVoidAsync("ScrollChatToBottom", new object[] { });
    }

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}